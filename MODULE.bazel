"""
Module file for Zig text embeddings inference Bazel workspace.
"""
module(
    name = "zig_text_embeddings_inference",
    version = "0.0.0",
)

bazel_dep(name = "rules_zig", version = "20250530.0-5084f1f")  # Should match ZML rules_zig version and not the one from bcr
bazel_dep(name = "zml", version = "0.0.0")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "aspect_bazel_lib", version = "2.14.0")
bazel_dep(name = "rules_oci", version = "2.2.5")
bazel_dep(name = "platforms", version = "0.0.11")

# Add toolchains_llvm_bootstrapped dependency (same as ZML uses)
bazel_dep(name = "toolchains_llvm_bootstrapped", version = "0.2.3")

# Configure Zig toolchain
zig = use_extension("@rules_zig//zig:extensions.bzl", "zig")
zig.toolchain(zig_version = "0.14.1")

# Register LLVM toolchains (same as ZML does)
register_toolchains(
    "@toolchains_llvm_bootstrapped//toolchain:linux_amd64",
    "@toolchains_llvm_bootstrapped//toolchain:linux_aarch64",
)

# Use ZML repository for the zml bazel_dep
git_override(
    module_name = "zml",
    remote = "https://github.com/zml/zml.git",
    commit = "8a6b4a9bdd6491111388e5c5a79cb4a75fac1102",  # master branch @ 18/06/2025
)

# ZAP does not provide bazel integration (no MODULE.bazel / BUILD.bazel),
# so we fetch and configure it using our external_deps extension in third_party
external_deps = use_extension("//:third_party/external_deps.bzl", "external_deps")
use_repo(external_deps, "com_github_zigzap_zap", "com_github_hejsil_clap")

# Huggingface extension
huggingface = use_extension("@zml//bazel:huggingface.bzl", "huggingface")

# Model: Alibaba-NLP/gte-modernbert-base
huggingface.model(
    name = "Alibaba-NLP-gte-modernbert-base",
    build_file_content = """\
package(default_visibility = ["//visibility:public"])
filegroup(
    name = "model",
    srcs = ["model.safetensors"],
)

filegroup(
    name = "tokenizer",
    srcs = ["tokenizer.json"],
)

filegroup(
    name = "config",
    srcs = ["config.json"],
)
""",
    commit = "bc02f0a92d1b6dd82108036f6cb4b7b423fb7434",
    includes = [
        "model.safetensors",
        "tokenizer.json",
        "config.json",
    ],
    model = "Alibaba-NLP/gte-modernbert-base",
)
use_repo(huggingface, "Alibaba-NLP-gte-modernbert-base")

# Model : answerdotai/ModernBERT-large
huggingface.model(
    name = "answerdotai-ModernBERT-large",
    build_file_content = """\
package(default_visibility = ["//visibility:public"])
filegroup(
    name = "model",
    srcs = ["model.safetensors"],
)

filegroup(
    name = "config",
    srcs = ["config.json"],
)

filegroup(
    name = "tokenizer",
    srcs = ["tokenizer.json"],
)
""",
    commit = "45bb4654a4d5aaff24dd11d4781fa46d39bf8c13",
    includes = [
        "config.json",
        "model.safetensors",
        "tokenizer.json",
    ],
    model = "answerdotai/ModernBERT-large",
)
use_repo(huggingface, "answerdotai-ModernBERT-large")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_cc_debian12",
    digest = "sha256:1850aee2ff72864350058d83d681c757d45c885986d15fcca7309b9e5c69f39a",
    image = "gcr.io/distroless/cc-debian12",
    platforms = [
        "linux/amd64",
    ],
)
use_repo(oci, "distroless_cc_debian12", "distroless_cc_debian12_linux_amd64")